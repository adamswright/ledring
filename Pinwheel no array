#include "FastLED.h"

FASTLED_USING_NAMESPACE

// FastLED "100-lines-of-code" demo reel, showing just a few
// of the kinds of animation patterns you can quickly and easily
// compose using FastLED.
//
// This example also shows one easy way to define multiple
// animations patterns and have them automatically rotate.
//
// -Mark Kriegsman, December 2014

#if FASTLED_VERSION < 3001000
#error "Requires FastLED 3.1 or later; check github for latest code."
#endif

#define DATA_PIN    13
#define LED_TYPE    NEOPIXEL
#define NUM_LEDS    77
CRGB leds[NUM_LEDS];

#define BRIGHTNESS          96
#define FRAMES_PER_SECOND  120

void setup() {
  delay(2000); // 3 second delay for recovery

  // tell FastLED about the LED strip configuration
  FastLED.addLeds<LED_TYPE,DATA_PIN>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);

  // set master brightness control
  FastLED.setBrightness(BRIGHTNESS);
}



// List of patterns to cycle through.  Each is defined as a separate function below.
typedef void (*SimplePatternList[])();
SimplePatternList gPatterns = { pink,blue };

uint8_t gCurrentPatternNumber = 0; // Index number of which pattern is current

void loop()
{
   // Call the current pattern function once, updating the 'leds' array
  //gPatterns[gCurrentPatternNumber]();
  pinwheel();
  // send the 'leds' array out to the actual LED strip
  FastLED.show();
  // insert a delay to keep the framerate modest
  FastLED.delay(1000/FRAMES_PER_SECOND);

  //EVERY_N_SECONDS( 2 ) { nextPattern(); } // change patterns periodically
}

//#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))


//void nextPattern()
//{
  // add one to the current pattern number, and wrap around at the end
 // gCurrentPatternNumber = (gCurrentPatternNumber + 1) % ARRAY_SIZE( gPatterns);
//}


void pink()

{
 for ( int i = 0; i < NUM_LEDS; i++)

 {
  leds[i] = CRGB::HotPink;

  }
}

void blue()

{
 for ( int i = 0; i < NUM_LEDS; i++)

 {
  leds[i] = CRGB::Blue;
  }
}



void pinwheel()

{
  
for ( int j = 0; j < NUM_LEDS + NUM_LEDS/2; j++) {
	for ( int i = 0; i < NUM_LEDS/2; i++) {
  		leds[i+j] = CRGB::HotPink;
  		leds[NUM_LEDS/2+i+j] = CRGB::Blue;
  	}
	FastLED.show();
	FastLED.delay(1000/FRAMES_PER_SECOND);
}
